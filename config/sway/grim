#!/usr/bin/python3
import os
import gi
import subprocess
import re
import time

gi.require_version("Gtk", "3.0")
gi.require_version("AppIndicator3", "0.1")
from gi.repository import Gtk as gtk, AppIndicator3 as appindicator, GLib as glib

dir = glib.get_user_special_dir(glib.UserDirectory.DIRECTORY_PICTURES)
os.environ["GRIM_DEFAULT_DIR"] = dir

def main():
    indicator = appindicator.Indicator.new(
        "screenshooter",
        "applets-screenshooter-symbolic",
        appindicator.IndicatorCategory.APPLICATION_STATUS,
    )
    indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
    indicator.set_menu(menu())
    gtk.main()


def menu():
    menu = gtk.Menu()

    GTK_ICON_SIZE_MENU = 16

    quick = gtk.ImageMenuItem()
    quickimage = gtk.Image()
    quickimage.set_from_icon_name("camera-photo-symbolic", GTK_ICON_SIZE_MENU)
    quick.set_image(quickimage)
    quick.set_always_show_image(True)
    quick.set_label("Quick")
    quick.connect("activate", take_full_screenshot, 0)
    menu.append(quick)

    dmenu = gtk.Menu()

    delayed = gtk.ImageMenuItem()
    delayedimage = gtk.Image()
    delayedimage.set_from_icon_name("camera-photo-symbolic", GTK_ICON_SIZE_MENU)
    delayed.set_image(delayedimage)
    delayed.set_always_show_image(True)
    delayed.set_label("Delayed")
    delayed.set_submenu(dmenu)

    five = gtk.MenuItem()
    five.set_label("5")
    five.connect("activate", take_full_screenshot, 5)
    ten = gtk.MenuItem()
    ten.set_label("10")
    ten.connect("activate", take_full_screenshot, 10)
    fifteen = gtk.MenuItem()
    fifteen.set_label("15")
    fifteen.connect("activate", take_full_screenshot, 15)

    dmenu.append(five)
    dmenu.append(ten)
    dmenu.append(fifteen)

    menu.append(delayed)

    mmenu = gtk.Menu()

    monitor = gtk.ImageMenuItem()
    monitorimage = gtk.Image()
    monitorimage.set_from_icon_name("video-display-symbolic", GTK_ICON_SIZE_MENU)
    monitor.set_image(monitorimage)
    monitor.set_always_show_image(True)
    monitor.set_label("Monitor")
    monitor.set_submenu(mmenu)

    makeItem(mmenu)

    menu.append(monitor)

    selection = gtk.ImageMenuItem()
    selectionimage = gtk.Image()
    selectionimage.set_from_icon_name("edit-select-all-symbolic", GTK_ICON_SIZE_MENU)
    selection.set_image(selectionimage)
    selection.set_always_show_image(True)
    selection.set_label("Selection")
    selection.connect("activate", take_selection_screenshot)
    menu.append(selection)

    menu.show_all()
    return menu


def get_outputs():
    sway_outputs = subprocess.run(
        ["swaymsg", "-t", "get_outputs"], check=True, capture_output=True
    )
    output_names = subprocess.run(
        ["grep", "name"], input=sway_outputs.stdout, capture_output=True
    )
    outputs_as_text = output_names.stdout.decode("utf-8")
    outputs_split = re.split("\n", outputs_as_text)
    outputs_striped = [my_strip(line) for line in outputs_split]
    outputs_names_only = [re.sub('"name":\ ', "", line) for line in outputs_striped]
    outputs_cleaned = [re.sub('[",]', "", line) for line in outputs_names_only]
    outputs_cleaned.pop()
    return outputs_cleaned


def makeItem(menu):
    outputs = get_outputs()
    for i in outputs:
        name = i
        i = gtk.MenuItem()
        i.set_label(name)
        i.connect("activate", take_output_screenshot, name)
        menu.append(i)


def my_strip(text):
    return text.strip()


def take_full_screenshot(widget, delay):
    time.sleep(delay)
    os.system("grim")


def take_output_screenshot(widget, output):
    os.system(f"grim -o {output}")


def take_selection_screenshot(widget):
    slurp = subprocess.run(["slurp", ""], check=True, capture_output=True)
    geometry = slurp.stdout.decode("utf-8").strip()
    os.system(f'grim -g "{geometry}"')


if __name__ == "__main__":
    main()
